#query($itemId:Int) {
#    item(id: $itemId)@filter(predicate:"name!=null"){
#        itemId
#        name
#    }
#}

#query($userId:Int){
#    userInfo(id:$userId){
#        preferredItemIdList @node(name:"ids")
#        acquiredCouponIdList @node(name:"ids")
#    }
#
#    itemList(ids: 1) @link(argument:"ids",node:"ids"){
#        name @cache()
#    }
#
#    couponList(ids: 1) @link(argument:"ids",node:"ids"){
#        price
#    }
#}


#query($userId:Int){
#    userInfo(id:$userId){
#        age
#        name
#        preferredItemIdList @node(name:"itemIds")
#        acquiredCouponIdList @node(name:"couponIds")
#    }
#
#    itemList(ids:1) @link(argument:"ids",node:"itemIds"){
#        name
#        salePrice
#        withCouponIdList
#    }
#
#    couponList(ids:1) @link(argument:"ids",node:"couponIds"){
#        couponId
#        price
#        changedPrice: price @map(mapper: "price +1")
#    }
#}


# fixme 通过node-path取值
#query($itemIdList:[Int]){
#    itemList(ids:$itemIdList) @node(name:"couponIds",path:"withCouponIdList"){
#        withCouponIdList
#    }
#
#    couponList(ids:1) @link(argument:"ids",node:"couponIds"){
#        id
#        price
#    }
#}

#query($itemId:Int) {
#    item(id: $itemId){
#        itemId
#        name
#        priceText: name @map(mapper:"'售价'+str(salePrice/100)+'元'")
#    }
#}

#query($userIds: [Int]){
#    userInfoList(ids:$userIds){
#        userId
#        name
#        favoriteItemId @node(name:"itemIds")
#    }
#    itemList(ids: 1)@link(argument:"ids",node:"itemIds"){
#        itemId
#        name
#    }
#}

#query{
#    userInfoList(ids: [1,2,3]) @sortBy(key: "id"){
#        userId
#        name
#        favoriteItemId
#    }
#}

# 跨数据源计算例子
#query ($itemIds:[Int]){
#    itemStockList(ids: $itemIds) @node(name:"stockInfoList",transform: "toMap(itemId)")
#    {
#        itemId
#        stockAmount
#    }
#    itemList(ids: $itemIds){
#        itemId
#        name
#        stockAmount @map(mapper: " seq.get(findOne(node('stockInfoList'),'itemId','itemId'),'stockAmount') ")
#    }
#
#}

#query {
#    item{
#        couponList{
#            # 预期不将 item 注册为任务
#            couponId @node(name: "itemCIdS")
#            limitation @node(name: "itemLimitationList")
#        }
#    }
#
#    itemList{
#        couponList{
#            # 全路径三个节点都会注册为任务
#            couponId @node(name:"itemListCIdS")
#        }
#    }
#}


# 过滤掉小于5的参数
#query ($itemIds:[Int]){
#    itemList(ids: $itemIds) @paramTransform(type: FILTER,name: "ids",exp: "param>10")
#    {
#        itemId
#        name
#        stockAmount
#    }
#}

# 依赖的节点没有被使用
#query {
#    itemList(ids: [1,2,3,4])
#    @filter(predicate: "itemId>0",dependencyNode: "preferredItemIdList")
#    {
#        itemId
#        name
#    }
#
#    userInfo{
#        preferredItemIdList @node(name:"preferredItemIdList")
#    }
#}

# 使用最喜欢的商品列表过滤结果集
#query {
#    itemList(ids: [1,2,3,4])
#    @filter(predicate: "listContain(preferredItemIdList,itemId)", dependencyNode: "preferredItemIdList")
#    {
#        itemId
#        name
#    }
#
#    userInfo(id:3){
#        # 根据userDF逻辑，preferredItemIdList = [3,4,5]
#        preferredItemIdList @node(name:"preferredItemIdList")
#    }
#}


# 指令机器依赖的字段在同一个listField中
#query {
#    itemList(ids: [1,2,3,4])
#    {
#        itemId @node(name:"itemId")
#        name
#        couponList @filter(predicate: "func(itemId)", dependencyNode: "itemId")
#        {
#            couponId
#        }
#    }
#}